% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MonetDBConnection.R
\name{dbSendUpdate}
\alias{dbSendUpdate}
\alias{dbSendUpdate,MonetDBConnection,character-method}
\alias{dbSendUpdateAsync}
\alias{dbSendUpdateAsync,MonetDBConnection,character-method}
\title{Send a data-altering SQL statement to the database.}
\usage{
dbSendUpdate(conn, statement, ..., async = FALSE)

\S4method{dbSendUpdate}{MonetDBConnection,character}(conn, statement, ..., list = NULL, async = FALSE)

dbSendUpdateAsync(conn, statement, ...)

\S4method{dbSendUpdateAsync}{MonetDBConnection,character}(conn, statement, ..., list = NULL)
}
\arguments{
\item{conn}{A MonetDB.R database connection, created using \code{\link[DBI:dbConnect]{DBI::dbConnect()}} with
the \code{\link[=MonetDB.R]{MonetDB.R()}} database driver.}

\item{statement}{A SQL statement to be sent to the database, e.g. \code{UPDATE} or
\code{INSERT}.}

\item{...}{Parameters to be bound to '?' characters in the query, similar to
JDBC.}

\item{async}{Behaves like \code{dbSendUpdateAsync()} Defaults to \code{FALSE}.}

\item{list}{A list of extra parameters.}
}
\value{
TRUE update was successful
}
\description{
The function \code{dbSendUpdate()} is used to send a data-altering statement
to a MonetDB database, e.g. \verb{CREATE TABLE} or \code{INSERT}. As a
convenience feature, a placeholder (\verb{?} character) can be used in the
SQL statement, and bound to parameters given in the varargs group before
execution. This is especially useful when scripting database updates, since
the parameters will be automatically quoted.

The \code{dbSendUpdateAsync()} function works in a similar way as
\verb{dbSendUpdate()``, except that the former should be used when the database update is called from finalisers, to avoid very esoteric concurrency problems. The }dbSendUpdateAsync()` function can be used in
finalisers to not mess up the socket. Here, the update is not guaranteed.
}
\examples{
library(DBI)
# Only run the examples on systems with the default MonetDB connection:
if (foundDefaultMonetDBdatabase()) {
  conn <- dbConnect(MonetDB.R())

  dbSendUpdate(conn, "CREATE TABLE foo(a INT,b VARCHAR(100))")
  dbSendUpdate(conn, "PREPARE INSERT INTO foo VALUES(?,?)", 42, "bar")

  dbSendUpdateAsync(conn, "PREPARE INSERT INTO foo VALUES(?,?)", 24, "bar")
  dbSendUpdateAsync(conn, "DROP TABLE foo")

  dbDisconnect(conn)
}
}
\seealso{
\code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}}
}
