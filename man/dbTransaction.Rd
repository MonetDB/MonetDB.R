% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transactions.R
\name{dbTransaction}
\alias{dbTransaction}
\title{Run a multi-statements transaction}
\usage{
\S4method{dbTransaction}{MonetDBConnection}(conn, ...)
}
\arguments{
\item{conn}{A MonetDB.R database connection, created using \link[DBI:dbConnect]{DBI::dbConnect} with
the \link{MonetDB.R} database driver.}

\item{...}{More parameters. Ignored.}
}
\value{
TRUE if the transaction was successful
}
\description{
This method is DEPRECATED. Please use \link{monetdb-transactions} functions
instead.

\code{dbTransaction()} is used to switch the query processing from the normal
auto-commiting mode into the transactional mode. Here, changes to the
database will not be permanent until \code{\link[=dbCommit]{dbCommit()}} is called. If the changes
are not to be persisted in the database, you can use \code{\link[=dbRollback]{dbRollback()}} to undo
all the changes since \code{dbTransaction()} was called.
}
\examples{
# Only run the examples on systems with MonetDB connection:
run <- monetdbHasDefault()

library(DBI)
if (run) conn <- dbConnect(MonetDB.R(), "monetdb://localhost/demo")
if (run) dbSendUpdate(conn, "CREATE TABLE foo(a INT,b VARCHAR(100))")
if (run) dbTransaction(conn)
if (run) dbSendUpdate(conn, "INSERT INTO foo VALUES(?,?)", 42, "bar")
if (run) dbCommit(conn)
if (run) dbTransaction(conn)
if (run) dbSendUpdate(conn, "INSERT INTO foo VALUES(?,?)", 43, "bar")
if (run) dbRollback(conn)
}
