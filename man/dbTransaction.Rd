% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deprecated.R
\name{dbTransaction}
\alias{dbTransaction}
\alias{dbTransaction,MonetDBConnection-method}
\title{Run a multi-statements transaction}
\usage{
dbTransaction(conn, ...)

\S4method{dbTransaction}{MonetDBConnection}(conn, ...)
}
\arguments{
\item{conn}{A MonetDB.R database connection, created using \link[DBI:dbConnect]{DBI::dbConnect} with
the \link{MonetDB.R} database driver.}

\item{...}{More parameters. Ignored.}
}
\value{
TRUE if the transaction was successful
}
\description{
This method is DEPRECATED. Please use \link{transactions} functions
instead.

\code{dbTransaction()} is used to switch the query processing from the normal
auto-commiting mode into the transactional mode. Here, changes to the
database will not be permanent until \code{\link[=dbCommit]{dbCommit()}} is called. If the changes
are not to be persisted in the database, you can use \code{\link[=dbRollback]{dbRollback()}} to undo
all the changes since \code{dbTransaction()} was called.
}
\examples{
library(DBI)
if (foundDefaultMonetDBdatabase()) {
  conn <- dbConnect(MonetDB.R())
  dbSendUpdate(conn, "CREATE TABLE foo(a INT,b VARCHAR(100))")
  dbTransaction(conn)
  dbSendUpdate(conn, "INSERT INTO foo VALUES(?,?)", 42, "bar")
  dbCommit(conn)
  # we expect one record
  dbReadTable(conn, "foo")

  dbTransaction(conn)
  dbSendUpdate(conn, "INSERT INTO foo VALUES(?,?)", 43, "bar")
  dbRollback(conn)
  # we still expect one record
  dbReadTable(conn, "foo")
  dbRemoveTable(conn, "foo")
  dbDisconnect(conn)
}
}
