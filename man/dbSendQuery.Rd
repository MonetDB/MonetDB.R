% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MonetDBConnection.R
\name{dbSendQuery}
\alias{dbSendQuery}
\title{dbSendQuery}
\usage{
\S4method{dbSendQuery}{MonetDBConnection,character}(conn, statement, ..., list = NULL, async = FALSE)
}
\arguments{
\item{conn}{A \linkS4class{MonetDBConnection} created by \code{\link[=dbConnect]{dbConnect()}}.}

\item{statement}{An SQL string to execute}

\item{...}{Another arguments needed for compatibility with generic (currently
ignored).}

\item{list}{A list of extra parameters. Default: \code{NULL}.}

\item{async}{Execute the query in Async mode? Default: \code{FALSE}.}

\item{params}{A list of query parameters to be substituted into
a parameterised query. Query parameters are sent as strings, and the
correct type is imputed by PostgreSQL. If this fails, you can manually
cast the parameter with e.g. \code{"$1::bigint"}.}
}
\description{
FIXME: update this documentation!
Execute a SQL statement on a database connection. This one does all the work
in this class.

To retrieve results a chunk at a time, use \code{dbSendQuery()},
\code{dbFetch()}, then \code{dbClearResult()}. Alternatively, if you want all the
results (and they'll fit in memory) use \code{dbGetQuery()} which sends,
fetches and clears for you.
}
\examples{
# For running the examples on systems without PostgreSQL connection:
run <- postgresHasDefault()

library(DBI)
if (run) db <- dbConnect(MonetDB.R::MonetDB.R())
if (run) dbWriteTable(db, "usarrests", datasets::USArrests, temporary = TRUE)

# Run query to get results as dataframe
if (run) dbGetQuery(db, "SELECT * FROM usarrests LIMIT 3")

# Send query to pull requests in batches
if (run) res <- dbSendQuery(db, "SELECT * FROM usarrests")
if (run) dbFetch(res, n = 2)
if (run) dbFetch(res, n = 2)
if (run) dbHasCompleted(res)
if (run) dbClearResult(res)

if (run) dbRemoveTable(db, "usarrests")

if (run) dbDisconnect(db)
}
