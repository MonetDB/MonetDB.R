% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MonetDBConnection.R
\name{dbSendUpdateAsync}
\alias{dbSendUpdateAsync}
\title{Send a data-altering SQL statement to the database.}
\usage{
\S4method{dbSendUpdateAsync}{MonetDBConnection,character}(conn, statement, ..., list = NULL)
}
\arguments{
\item{conn}{A MonetDB.R database connection, created using \code{\link[DBI:dbConnect]{DBI::dbConnect()}} with
the \code{\link[=MonetDB.R]{MonetDB.R()}} database driver.}

\item{statement}{A SQL statement to be sent to the database, e.g. \code{UPDATE} or
\code{INSERT}.}

\item{...}{Parameters to be bound to '?' characters in the query, similar to
JDBC.}

\item{list}{A list of extra parameters.}
}
\value{
TRUE update was successful
}
\description{
The \code{dbSendUpdateAsync()} function is used to send a data-altering
statement to a MonetDB database, e.g. \verb{CREATE TABLE} or \code{INSERT}.
As a convenience feature, a placeholder (i.e. the \verb{?} character) can be used
in the SQL statement, and bound to parameters given in the varargs group
before execution. This is especially useful when scripting database updates,
since the parameters will be automatically quoted.

The \code{dbSendUpdateAsync()} function works in a similar way as
\code{\link[=dbSendUpdate]{dbSendUpdate()}}, except that the former should be used
when the database update is called from finalisers, to avoid very esoteric
concurrency problems. Here, the update is not guaranteed
}
\examples{
conn <- dbConnect(MonetDB.R(), "monetdb://localhost/demo")
dbSendUpdateAsync(conn, "CREATE TABLE foo(a INT,b VARCHAR(100))")
dbSendUpdateAsync(conn, "INSERT INTO foo VALUES(?,?)", 42, "bar")
}
\seealso{
\code{\link[=dbSendUpdate]{dbSendUpdate()}} \code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}}
}
